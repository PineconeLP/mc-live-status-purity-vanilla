<RadzenChart>
    <RadzenDonutSeries Data="@PlayerCountDataItems" ValueProperty="@nameof(PlayerCountDataItem.Percentage)" Fills="@Fills">
        <TitleTemplate>
            <div class="rz-donut-content">
                @OnlinePlayers / @MaxPlayers
            </div>
        </TitleTemplate>
    </RadzenDonutSeries>
    <RadzenChartTooltipOptions Visible="false"/>
    <RadzenLegend Visible="false" />
</RadzenChart>

@code {
    [Parameter]
    public int OnlinePlayers { get; set; }

    [Parameter]
    public int MaxPlayers { get; set; }

    [Parameter]
    public bool IsFull { get; set; }

    [Parameter]
    public bool IsFullExcludingQueue { get; set; }

    private IEnumerable<PlayerCountDataItem> PlayerCountDataItems => CalculatePlayerCountDataItems();

    private IEnumerable<string> Fills => CalculateFills();

    private IEnumerable<PlayerCountDataItem> CalculatePlayerCountDataItems()
    {
        List<PlayerCountDataItem> playerCountDataItems = new List<PlayerCountDataItem>();

        double onlinePlayersPercent = (double)OnlinePlayers / (double)MaxPlayers;
        if (onlinePlayersPercent > 1)
        {
            onlinePlayersPercent = 1;
        }

        double maxPlayersPercent = 1 - onlinePlayersPercent;

        playerCountDataItems.Add(new PlayerCountDataItem(onlinePlayersPercent));
        playerCountDataItems.Add(new PlayerCountDataItem(maxPlayersPercent));

        return playerCountDataItems;
    }

    private IEnumerable<string> CalculateFills()
    {
        string onlinePlayersFill;

        if (IsFull)
        {
            onlinePlayersFill = "red";
        }
        else if (IsFullExcludingQueue)
        {
            onlinePlayersFill = "yellow";
        }
        else
        {
            onlinePlayersFill = "green";
        }

        return new string[] { onlinePlayersFill, "#f2f2f2" };
    }

    private class PlayerCountDataItem
    {
        public double Percentage { get; }

        public PlayerCountDataItem(double percentage)
        {
            Percentage = percentage;
        }
    }
}